// Part of the Ziv Programming Language, under the Apache License v2.0 with LLVM
// See /LICENSE for license details.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception

#ifndef ZIV_NODE_KIND
#error "ZIV_NODE_KIND must be defined before including this file"
#endif

// File structure
ZIV_NODE_KIND(FileStart)           // Marks the start of the file
ZIV_NODE_KIND(FileEnd)             // Marks the end of the file
ZIV_NODE_KIND(Invalid)             // Invalid node
ZIV_NODE_KIND(Placeholder)         // Placeholder node

// Type nodes
ZIV_NODE_KIND(IntegerType)         // Integer type
ZIV_NODE_KIND(FloatType)           // Float type
ZIV_NODE_KIND(StringType)          // String type
ZIV_NODE_KIND(BoolType)           // Boolean type
ZIV_NODE_KIND(ParameterType)       // Parameter type

// Operator nodes
ZIV_NODE_KIND(AssignmentOp)        // Assignment operator
ZIV_NODE_KIND(BinaryOp)           // Binary operator
ZIV_NODE_KIND(UnaryOp)            // Unary operator

// Function-related nodes
ZIV_NODE_KIND(FunctionCall)        // Function call
ZIV_NODE_KIND(ReturnType)         // Function return type

// Top-level Constructs
ZIV_NODE_KIND(TranslationUnit)     // Root node for entire source file
ZIV_NODE_KIND(ModuleDecl)          // Module declaration
ZIV_NODE_KIND(ModuleName)          // Module name
ZIV_NODE_KIND(ModuleImport)        // Import declaration
ZIV_NODE_KIND(ModuleAlias)         // Module alias
ZIV_NODE_KIND(ModuleImportList)    // List of imported items
ZIV_NODE_KIND(ModuleImportItem)    // Individual imported item

// Declarations
ZIV_NODE_KIND(VarDecl)            // Variable declaration (let/mut)
ZIV_NODE_KIND(VariableName)        // Variable name
ZIV_NODE_KIND(VariableInit)        // Variable initialization
ZIV_NODE_KIND(TypeSpec)           // Type specification
ZIV_NODE_KIND(FunctionDecl)        // Function declaration
ZIV_NODE_KIND(FunctionName)        // Function name
ZIV_NODE_KIND(FunctionSignature)   // Function signature
ZIV_NODE_KIND(FunctionBody)        // Function body
ZIV_NODE_KIND(StructDecl)         // Struct declaration
ZIV_NODE_KIND(ClassDecl)          // Class declaration
ZIV_NODE_KIND(EnumDecl)           // Enum declaration
ZIV_NODE_KIND(MethodDecl)         // Class method declaration

// Parameters and Arguments
ZIV_NODE_KIND(ParameterList)       // Function parameters
ZIV_NODE_KIND(Parameter)           // Individual parameter
ZIV_NODE_KIND(ArgumentList)        // Function call arguments
ZIV_NODE_KIND(Argument)           // Individual argument

// Statements
ZIV_NODE_KIND(StatementList)       // List of statements
ZIV_NODE_KIND(CodeBlock)           // Code block
ZIV_NODE_KIND(ReturnStmt)         // Return statement
ZIV_NODE_KIND(IfStatement)         // If statement
ZIV_NODE_KIND(ElseStatement)       // Else statement
ZIV_NODE_KIND(WhileLoop)          // While loop
ZIV_NODE_KIND(DoWhileLoop)        // Do-while loop
ZIV_NODE_KIND(ForLoop)            // For loop
ZIV_NODE_KIND(MatchStmt)          // Match statement
ZIV_NODE_KIND(CaseStmt)           // Match case
ZIV_NODE_KIND(BreakStmt)          // Break statement
ZIV_NODE_KIND(ContinueStmt)       // Continue statement

// Expressions
ZIV_NODE_KIND(ArrayExpr)          // Array expression
ZIV_NODE_KIND(LiteralExpr)        // Literal expressions
ZIV_NODE_KIND(BinaryExpr)         // Binary expressions
ZIV_NODE_KIND(UnaryExpr)          // Unary expressions
ZIV_NODE_KIND(CallExpr)           // Function call expressions
ZIV_NODE_KIND(IndexExpr)          // Array/map indexing
ZIV_NODE_KIND(IdentifierExpr)     // Variable references

// Class Members
ZIV_NODE_KIND(FieldDecl)          // Field declaration
ZIV_NODE_KIND(MethodList)         // Method list
ZIV_NODE_KIND(FieldList)          // Field list

// Special
ZIV_NODE_KIND(Error)              // Error node
ZIV_NODE_KIND(Comment)            // Comment node

#undef ZIV_NODE_KIND
